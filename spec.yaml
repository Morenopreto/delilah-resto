openapi: 3.0.0
info:
  version: 1.0-oas3
  title: Delilah Resto
  description: third project
tags:
  - name: usuarios
    description: usuarios de la plataforma de pedidos
  - name: productos
    description: productos listados dentro de la plataforma de pedidos
  - name: pedidos
    description: pedidos realizados por usuarios
components:
  securitySchemes:
    bearerToken:            
      type: http
      scheme: bearer
      bearerFormat: JWT    
paths:
  '/usuarios':
    post:
      tags:
        - usuarios
      summary: Crea nuevo usuario
      responses:
        '200':
          description: Conexion correcta
          content:
            text/plain:
              schema:
                type: string
                example: Usuario "Num Usuario" agregado correctamente.
        '400':
          description: Datos ingresados incorrectos/faltantes
          content:
            text/plain:
              schema:
                type: string
                example: "Los campos Nombre completo, mail, direccion, Contrasena y Nombre de usuario son obligatorios."
        '500':
          description: Error
         
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                nombrecompleto:
                  type: string
                mail:
                  type: string
                direccion:
                  type: string
                telefono:
                  type: integer
                usuario:
                  type: string
                contrasena:
                  type: string
        required: true
  '/usuarios/login':
    post:
      tags: 
        - usuarios
      summary: Realiza el log in de los usuarios.
      responses:
        '200':
          description: Conexion correcta - JWT
          content:
            application/json:
              schema:
                example: 'xxxx.yyyy.zzzz'
        '400':
          description: Usuario o Contrasena incorrectos
      
        '404':
          description: Usuario no encontrado
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                usuario:
                  type: string
                contrasena:
                  type: string
        required: true
  '/usuarios/{usuario_id}':
    get:
      tags:
        - usuarios
      summary: Trae la informacion del usuario una vez que inicio sesion.
      security:
        - bearerToken: []
      parameters:
        - name: usuario_id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: El usuario existe y trae la informacion del mismo.
        '400':
          description: No tiene permiso para entrar a este usuario
        '500':
          description: Error
  '/productos':
    get:
      tags:
      - productos
      summary: lista productos disponibles y activos
      security:
        - bearerToken: []
      responses:
        '200':
          description:  Lista los productos activos
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    producto_id:
                      type: integer
                    nombre_producto:
                      type: string
                    descripcion:
                      type: string
                    precio:
                      type: number
                    Img_url:
                      type: string
                    active:
                      type: integer
                      
                example: [{
                    "producto_id": 1,
                    "nombre_producto": "Chesseburger",
                    "descripcion": "Hamb. con queso",
                    "precio": "250",
                    "Img_url": "https:/urldeimagen.jpg",
                    "active": 1},{
                    "producto_id": 2,
                    "nombre_producto": "Double Chesseburger",
                    "descripcion": "Hamb. doble con queso",
                    "precio": "350",
                    "Img_url": "https:/urldeimagen.jpg",
                    "active": 1}] 
        '500':
          description: Error  
    post:
      tags: 
        - productos
      summary: crea nuevo producto. (ADMIN USERS).
      security:
        - bearerToken: []
      responses:
        '200':
          description: Producto creado correctamente
        '400':
          description: Nombre de producto existente
      
        '500':
          description: Error.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre_producto:
                  type: string
                descripcion:
                  type: string
                precio:
                  type: number
                Img_url:
                  type: string
        required: true
  '/productos/{producto_id}':      
    patch:
      tags:
        - productos
      summary: Modifica productos existentes (ADMIN USERS)
      security:
        - bearerToken: []
      parameters:
        - name: producto_id
          in: path
          description: Id del producto
          required: true
          schema:
            type: integer
            format: int64  
      responses:
        '200':
          description: El producto con id {producto_id} se modifico de manera correcta.
        '400':
          description: El producto_id ${producto_id} no existe.
      
        '500':
          description: Error.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre_producto:
                  type: string
                descripcion:
                  type: string
                precio:
                  type: number
                Img_url:
                  type: string
    delete:
      tags:
        - productos
      summary: Desactiva un producto (ADMIN USERS)
      security:
        - bearerToken: []
      parameters:
        - name: producto_id
          in: path
          description: Id del producto
          required: true
          schema:
            type: integer
            format: int64
        - name: active
          in: query
          description: activa o desactiva el producto.
          required: true
          schema:
            type: integer
            example: active=true OR active=false    
      responses:
        '200':
          description: El producto con id {producto_id} se modifico de manera correcta.
        '400':
          description: El producto_id ${producto_id} no existe.
      
        '500':
          description: Error.

  '/pedidos':
    post:
      tags:
        - pedidos
      summary: Crea un nuevo pedido para el usuario.
      security:
        - bearerToken: []
      parameters:
        - name: metodo_pago
          in: query
          description: envia el metodo de pago que se uso en la transaccion.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Producto creado correctamente
        '400':
          description: Nombre de producto existente
      
        '500':
          description: Error.
      
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  producto_id:
                    type: integer
                  quantity:
                    type: integer
              example:  [
                      {
                          "producto_id": 1,
                          "quantity": 3
                      },
                      {
                          "producto_id": 2,
                          "quantity": 3
                      }]
        required: true
    get:
      tags:
        - pedidos
      security:
        - bearerToken: []
      summary: Lista la totalidad de los pedidos (ADMIN USERS).
      responses:
        '200':
          description: Lista los pedidos en formato JSON teniendo en cuenta primero pedido y luego la descripcion del mismo.
        '500':
          description: Error.
  "/pedidos/{order_id}":
    get:
      tags:
        - pedidos
      security:
        - bearerToken: []
      summary: Lista un pedido segun order_ID. 
      parameters:
        - name: order_id
          in: path
          description: ID de pedido.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Muestra el pedido con el order_id solicitado.
        '500':
          description: Error.
    patch:
      tags:
        - pedidos
      summary: Modifica productos existentes (ADMIN USERS)
      security:
        - bearerToken: []
      parameters:
        - name: order_id
          in: path
          description: ID de pedido.
          required: true
          schema:
            type: integer  
        - name: new_estado_id
          in: query
          description: Estado del pedido Opciones (1=nuevo,2=confirmado,3=preparando,4=enviado,5=entregado)
          example:  Para pedido enviado - new_estado_id=4
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: El pedido con id {order_id} se modifico de manera correcta.
        '400':
          description: El order ${order_id} no existe.
      
        '500':
          description: Error.